require "swagger_helper"

RSpec.describe "civil_merits_questions" do
  let(:data) do
    {
      request_id: "7d47425b-800a-41ef-a917-934acc09b50d",
      proceedings: [example_data],
    }
  end
  let(:example_data) do
    {
      ccms_code: "SE013",
      delegated_functions_used: true,
      client_involvement_type: "A",
    }
  end

  path "/civil_merits_questions" do
    post("Request civil merits questions for a set of proceedings") do
      description "POST a JSON payload containing request-id (a UUID generated by the client) and an array
                 of proceedings (identified by ccms_code, whether they used delegated_functions and their client involvement type), to
                 return a response containing the same request-id and an array of merits tasks, grouped
                 by application and proceeding type. <br/><br/>
                 The tasks listed under application must be done once for the entire application, the tasks listed under
                 each proceeding type must be done once for each proceeding type.  Each task is specified as a key-value
                 pair where the key is the task name, and the value is the tasks on which it is dependent, or an empty array
                 if it is not dependent on any other tasks. <br/><br/>
                 In the given example, proceeding type SE013 has three tasks, namely:
                 <ul><li><code>chances_of_success</code></li>
                 <li><code>children_proceeding</code></li>
                 <li><code>attempts_to_settle</code></li></ul>.
                 The <code>children_proceeding</code> task is dependent upon the <code>children_application</code> task (which is in the
                 application group) being completed before this can be completed."
      tags "Merits tasks"
      consumes "application/json"
      produces "application/json"
      parameter name: :data,
                in: :body,
                schema: {
                  type: :object,
                  required: %w[request_id proceedings],
                  description: "An array of proceeding data",
                  properties: {
                    request_id: { type: :string,
                                  example: "2a614e1a-a3d5-49ca-949a-c3248483d274",
                                  description: "Client generated request id that will be echoed back in the response" },
                    proceedings: {
                      type: :array,
                      description: "An array of hashes containing ccms_code, delegated_function_used and client_involvement_type as keys",
                      items: {
                        type: :object,
                        required: %i[ccms_code delegated_function_used client_involvement_type],
                        properties: {
                          ccms_code: { type: :string,
                                       description: "A code uniquely identifying the proceeding_type",
                                       example: "SE013" },
                          delegated_functions_used: { type: :boolean,
                                                      description: "A boolean indicating whether delegated functions were used",
                                                      example: true },
                          client_involvement_type: { type: :string,
                                                     description: "A code uniquely identifying the client_involvement_type",
                                                     example: "A" },
                          substantive_level_of_service: { type: :string,
                                                          description: "A code uniquely identifying the substantive level of service, currently only supports 1 or 3",
                                                          example: 1,
                                                          required: false },
                        },
                        description: "Array of CCMS codes, df_used and client involvement type of proceeding types to be queried",
                      },
                    },
                  },
                }
      response(200, "successful") do
        context "when a single proceeding is requested without limiting" do
          expected_response =
            {
              request_id: "7d47425b-800a-41ef-a917-934acc09b50d",
              success: true,
              application: {
                tasks: {
                  opponent_name: [],
                  when_contact_was_made: [],
                  opponent_mental_capacity: [],
                  statement_of_case: [],
                  children_application: [],
                  laspo: [],
                  why_matter_opposed: [],
                  nature_of_urgency: [],
                },
              },
              proceedings: [
                {
                  ccms_code: "SE013",
                  tasks: {
                    chances_of_success: [],
                    children_proceeding: %w[children_application],
                    attempts_to_settle: [],
                  },
                },
              ],
            }
          example "application/json",
                  :success,
                  expected_response,
                  "Successful request",
                  "Request a single proceeding, DA001, without triggering any rules"
          run_test! do |response|
            expect(response).to have_http_status(:success)
            expect(parsed_response).to eq expected_response
          end
        end

        context "when requesting a domestic abuse proceeding for a non-applicant" do
          let(:example_data) do
            {
              ccms_code: "DA001",
              delegated_functions_used: true,
              client_involvement_type: "D",
            }
          end

          expected_response =
            {
              request_id: "7d47425b-800a-41ef-a917-934acc09b50d",
              success: true,
              application: {
                tasks: {
                  opponent_name: [],
                  opponent_mental_capacity: [],
                  statement_of_case: [],
                  client_denial_of_allegation: [],
                  client_offer_of_undertakings: [],
                  nature_of_urgency: [],
                },
              },
              proceedings: [
                {
                  ccms_code: "DA001",
                  tasks: {
                    chances_of_success: [],
                    opponents_application: [],
                  },
                },
              ],
            }
          example "application/json",
                  :success_with_rules,
                  expected_response,
                  "Successful request with extra questions",
                  "Request a single proceeding, DA001, triggering additional, domestic abuse, questions"
          run_test! do |response|
            expect(response).to have_http_status(:success)
            expect(parsed_response).to eq expected_response
          end
        end

        context "when requesting a family proceeding for a child-subject" do
          let(:example_data) do
            {
              ccms_code: "SE003",
              delegated_functions_used: true,
              client_involvement_type: "W",
            }
          end

          expected_response =
            {
              request_id: "7d47425b-800a-41ef-a917-934acc09b50d",
              success: true,
              application: {
                tasks: {
                  laspo: [],
                  nature_of_urgency: [],
                  opponent_name: [],
                  opponent_mental_capacity: [],
                  statement_of_case: [],
                  when_contact_was_made: [],
                  why_matter_opposed: [],
                },
              },
              proceedings: [
                {
                  ccms_code: "SE003",
                  tasks: {
                    attempts_to_settle: [],
                    prohibited_steps: [],
                  },
                },
              ],
            }
          example "application/json",
                  :success_child_subject,
                  expected_response,
                  "Successful request without involved children questions",
                  "Request a single proceeding, SE003, for a child subject"
          run_test! do |response|
            expect(response).to have_http_status(:success)
            expect(parsed_response).to eq expected_response
          end
        end
      end

      response(400, "Bad request") do
        let(:example_data) do
          {
            ccms_code: "DA001",
            delegated_functions_used: true,
            client_involvement_type: "X",
          }
        end

        expected_response =
          {
            request_id: "7d47425b-800a-41ef-a917-934acc09b50d",
            success: false,
            errors: ["The property '#/proceedings/0/client_involvement_type' value \"X\" did not match one of the following values: A, D, W, Z, I in schema file://#"],
          }
        example "application/json",
                :invalid_cit,
                expected_response,
                "Invalid CIT",
                "User requests a non-existent client involvement type"

        run_test! do |response|
          expect(response.media_type).to eq("application/json")
          expect(parsed_response).to eq expected_response
        end
      end
    end
  end
end
