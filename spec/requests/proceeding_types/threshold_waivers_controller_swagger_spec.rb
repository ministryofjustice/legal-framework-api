require "swagger_helper"

RSpec.describe "proceeding_types/threshold_waivers" do
  path "/proceeding_types/threshold_waivers" do
    post("Return details of threshold waivers for specified proceeding types identified by CCMS-codes") do
      description "POST a JSON payload containing a request-id (a UUID generated by the client) and an array of
                  ccms_codes to recieve a payload containing the same request-id, and an array for each ccms_code submitted.<br/><br/>
                  Each item in the array will contain a list of Financial Eligibility assessment thresholds, and a value of true or false,
                  true meaning that the
                  threshold is waived for this proceeding type (i.e unlimited) or false to indicate that the threshold should be
                  applied.  The matter type to which the proceeding belongs is also returned."

      let(:threshold_waiver_query) do
        {
          request_id: "f40eb41d-e865-4d81-9daf-3fa9c1f2fdca",
          proceeding_types: %w[DA005 SE004 SE013],
        }
      end

      tags "Threshold waivers"
      consumes "application/json"
      produces "application/json"
      parameter name: :threshold_waiver_query,
                in: :body,
                schema: {
                  type: :object,
                  properties: {
                    request_id: { type: :string,
                                  example: "f40eb41d-e865-4d81-9daf-3fa9c1f2fdca",
                                  description: "Client generated request id that will be echoed back in the response" },
                    proceeding_types: { type: :array,
                                        items: { type: :string, description: "CCMS-codes of proceedings to be queried" },
                                        example: %w[DA005 SE004 SE013] },
                  },
                  required: %w[request_id ccms_codes],
                }
      response(200, "success") do
        expected_response =
          {
            request_id: "f40eb41d-e865-4d81-9daf-3fa9c1f2fdca",
            success: true,
            proceeding_types: [
              {
                ccms_code: "DA005",
                full_s8_only: false,
                sca_core: false,
                sca_related: false,
                gross_income_upper: true,
                disposable_income_upper: true,
                capital_upper: true,
                matter_type: "domestic abuse (DA)",
              },
              {
                ccms_code: "SE004",
                full_s8_only: false,
                sca_core: false,
                sca_related: false,
                gross_income_upper: false,
                disposable_income_upper: false,
                capital_upper: false,
                matter_type: "section 8 children (S8)",
              },
              {
                ccms_code: "SE013",
                full_s8_only: false,
                sca_core: false,
                sca_related: false,
                gross_income_upper: false,
                disposable_income_upper: false,
                capital_upper: false,
                matter_type: "section 8 children (S8)",
              },
            ],
          }
        example "application/json",
                :success,
                expected_response,
                "Successful request",
                "Returns the details of threshold waivers for specified proceeding types identified by an array of CCMS codes"
        run_test! do |response|
          expect(response).to have_http_status(:success)
          expect(parsed_response).to eq expected_response

          history = RequestHistory.find_by(request_id: "f40eb41d-e865-4d81-9daf-3fa9c1f2fdca")
          expect(history.request_method).to eq "POST"
          expect(history.endpoint).to eq "/proceeding_types/threshold_waivers"
          expect(history.request_payload).to match_json_expression threshold_waiver_query
          expect(history.response_status).to eq 200
          expect(history.response_payload).to match_json_expression expected_response
        end
      end

      response(400, "bad request") do
        let(:threshold_waiver_query) do
          {
            request_id: "f40eb41d-e865-4d81-9daf-3fa9c1f2fdca",
            proceeding_types: %w[DA005 ZZ262 SE013],
          }
        end

        after do |example|
          example.metadata[:response][:content] = {
            "application/json": {
              examples: {
                bad_request: {
                  value: JSON.parse(response.body, symbolize_names: true),
                  summary: "Unsuccessful request",
                  description: "When invalid proceeding types are submitted an error will be raised and returned to the users",
                },
              },
            },
          }
        end

        run_test! do |response|
          expect(response).to have_http_status(:bad_request)
          expect(parsed_response[:error_class]).to eq "ActiveRecord::RecordNotFound"
          expect(parsed_response[:message]).to match "Couldn't find ProceedingType"
        end
      end
    end
  end
end
