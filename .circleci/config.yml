version: 2.1

orbs:
  slack: circleci/slack@4.5.2
executors:
  basic-executor:
    docker:
      - image: cimg/base:2021.04
  cloud-platform-executor:
    docker:
      - image: ministryofjustice/cloud-platform-tools:2.1
        environment:
          GITHUB_TEAM_NAME_SLUG: laa-apply-for-legal-aid
  linting-executor:
    docker:
      - image: cimg/ruby:3.1.3-node
        environment:
          - RAILS_ENV=test
          - TZ: "Europe/London"
  test-executor:
    docker:
      - image: cimg/ruby:3.1.3-node
        environment:
          - RAILS_ENV=test
          - PGHOST=localhost
          - PGUSER=user
          - TZ: "Europe/London"
      - image: cimg/postgres:10.18
        environment:
          - POSTGRES_USER=user
          - POSTGRES_DB=legal_framework_api_test
  notification-executor:
    docker:
      - image: 'cibuilds/base:latest'
        environment:
          TERM: dumb
    resource_class: small

references:
  build_docker_image: &build_docker_image
    run:
      name: Build docker image
      command: |
        $(aws ecr get-login --no-include-email)
        docker build \
        --build-arg BUILD_DATE=$(date +%Y-%m-%dT%H:%M:%S%z) \
        --build-arg BUILD_TAG="app-${CIRCLE_SHA1}" \
        --build-arg APP_BRANCH=${CIRCLE_BRANCH} \
        -t app .
  push_to_ecr: &push_to_ecr
    run:
      name: Push image to ecr repo
      command: |
        docker tag app "${ECR_ENDPOINT}/laa-apply-for-legal-aid/legal-framework-api-uat-ecr:${CIRCLE_SHA1}"
        docker push "${ECR_ENDPOINT}/laa-apply-for-legal-aid/legal-framework-api-uat-ecr:${CIRCLE_SHA1}"

        if [ "${CIRCLE_BRANCH}" == "main" ]; then
          docker tag app "${ECR_ENDPOINT}/laa-apply-for-legal-aid/legal-framework-api-uat-ecr:latest"
          docker push "${ECR_ENDPOINT}/laa-apply-for-legal-aid/legal-framework-api-uat-ecr:latest"
        fi
  authenticate_k8s_live: &authenticate_k8s_live
    run:
      name: Authenticate with cluster
      command: |
        echo -n ${K8S_CLUSTER_CERT_LIVE} | base64 -d > ./ca.crt
        kubectl config set-cluster ${K8S_CLUSTER_NAME_LIVE} --certificate-authority=./ca.crt --server=https://${K8S_CLUSTER_NAME_LIVE}
        kubectl config set-credentials circleci --token=${K8S_TOKEN_LIVE}
        kubectl config set-context ${K8S_CLUSTER_NAME_LIVE} --cluster=${K8S_CLUSTER_NAME_LIVE} --user=circleci --namespace=${K8S_NAMESPACE}
        kubectl config use-context ${K8S_CLUSTER_NAME_LIVE}
  decrypt_secrets: &decrypt_secrets
    run:
      name: Decrypt secrets file
      command: |
        echo "${GIT_CRYPT_KEY}" | base64 -d > git-crypt.key
        git-crypt unlock git-crypt.key
  restore_gems_cache: &restore_gems_cache
    restore_cache:
      keys:
        - legal-framework-api-{{ checksum "Gemfile.lock" }}-v3.1.3
  install_gems: &install_gems
    run:
      name: Install ruby gems
      command: |
        gem install bundler -v 2.2.24
        bundle config set --local path 'vendor/bundle'
        bundle config set --local without 'development'
        bundle install --jobs=4 && bundle clean
  save_gems_cache: &save_gems_cache
    save_cache:
      key: legal-framework-api-{{ checksum "Gemfile.lock" }}-v3.1.3
      paths:
        - vendor/bundle
  install_packages_for_testing: &install_packages_for_testing
    run:
      name: Install System packages needed for testing
      command: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
  setup_database: &setup_database
    run:
      name: Database Setup
      command: |
        bundle exec rake db:create db:schema:load
        bundle exec rake db:migrate

jobs:
  lint_checks:
    executor: linting-executor
    steps:
      - checkout
      - *restore_gems_cache
      - *install_gems
      - *save_gems_cache
      - run:
          name: Run Rubocop
          command:  bin/rails rubocop
  unit_tests:
    executor: test-executor
    steps:
      - checkout
      - *install_packages_for_testing
      - *restore_gems_cache
      - *install_gems
      - *save_gems_cache
      - *setup_database
      - run:
          name: Setup Code Climate test-reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./tmp/cc-test-reporter
            chmod +x ./tmp/cc-test-reporter
      - run:
          name: Run ruby tests
          command: |
            ./tmp/cc-test-reporter before-build
            bundle exec rspec --format progress --format RspecJunitFormatter -o /tmp/test-results/rspec/rspec.xml
            ./tmp/cc-test-reporter format-coverage -t simplecov -o tmp/coverage/codeclimate.json
            ./tmp/cc-test-reporter upload-coverage -i tmp/coverage/codeclimate.json
      - store_test_results:
          path: /tmp/test-results/rspec
      - store_artifacts:
          path: ./coverage
  clean_up_ecr:
    executor: cloud-platform-executor
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Delete old images from ecr repo
          command: |
            ./bin/delete_ecr_images
  build_and_push:
    executor: cloud-platform-executor
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.11
      - *decrypt_secrets
      - *build_docker_image
      - *push_to_ecr
  deploy_uat: &deploy_uat
    executor: cloud-platform-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - *decrypt_secrets
      - *authenticate_k8s_live
      - deploy:
          name: Helm deployment to UAT
          command: |
            echo "k8s authenticated"
            echo "Installing LFAPI helm chart"
            ./bin/uat_deploy
  deploy_main_uat:
    <<: *deploy_uat
  deploy_staging:
    executor: cloud-platform-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - *decrypt_secrets
      - *authenticate_k8s_live
      - deploy:
          name: Helm deployment to staging
          command: |
            helm upgrade legal-framework-api ./deploy/helm/. \
                          --install --wait \
                          --namespace=${K8S_NAMESPACE} \
                          --values ./deploy/helm/values-staging.yaml \
                          --set image.repository="$ECR_ENDPOINT/laa-apply-for-legal-aid/legal-framework-api-uat-ecr" \
                          --set image.tag="${CIRCLE_SHA1}"
  deploy_production:
    executor: cloud-platform-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - *decrypt_secrets
      - *authenticate_k8s_live
      - deploy:
          name: Helm deployment to production
          command: |
            helm upgrade legal-framework-api ./deploy/helm/. \
                        --install --wait \
                        --namespace=${K8S_NAMESPACE} \
                        --values ./deploy/helm/values-production.yaml \
                        --set image.repository="$ECR_ENDPOINT/laa-apply-for-legal-aid/legal-framework-api-uat-ecr" \
                        --set image.tag="${CIRCLE_SHA1}"

  delete_dependabot_deployment:
    executor: cloud-platform-executor
    steps:
      - checkout
      - setup_remote_docker
      - *authenticate_k8s_live
      - run:
          name: Delete dependabot deployment
          command: |
            ./bin/delete_dependabot_deployment

generic-slack-fail-post-step: &generic-slack-fail-post-step
  post-steps:
    - slack/notify:
        event: fail
        template: basic_fail_1

workflows:
  new_pull_request:
    jobs:
      - lint_checks:
          filters:
            branches:
              ignore: main
          <<: *generic-slack-fail-post-step
      - unit_tests:
          filters:
            branches:
              ignore: main
          <<: *generic-slack-fail-post-step
      - build_and_push:
          context: legal-framework-api-uat
          filters:
            branches:
              ignore: main
          <<: *generic-slack-fail-post-step
      - deploy_uat:
          context: legal-framework-api-uat
          requires:
            - lint_checks
            - unit_tests
            - build_and_push
          <<: *generic-slack-fail-post-step
      - delete_dependabot_deployment:
          context: legal-framework-api-uat
          filters:
            branches:
              only:
                - /dependabot.*/
          requires:
            - deploy_uat
          <<: *generic-slack-fail-post-step

  merge_pr:
    jobs:
      - lint_checks:
          filters:
            branches:
              only: main
          <<: *generic-slack-fail-post-step
      - unit_tests:
          filters:
            branches:
              only: main
          <<: *generic-slack-fail-post-step
      - build_and_push:
          requires:
            - lint_checks
            - unit_tests
          <<: *generic-slack-fail-post-step
      - deploy_main_uat:
          context: legal-framework-api-uat
          requires:
            - build_and_push
          <<: *generic-slack-fail-post-step
      - deploy_staging:
          context: legal-framework-api-staging
          requires:
            - build_and_push
          <<: *generic-slack-fail-post-step
      - slack/on-hold:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "plain_text",
                    "text": ":circleci: $CIRCLE_USERNAME has a pending production approval for $CIRCLE_BRANCH"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project*: $CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Pull Request*: $CIRCLE_PULL_REQUEST"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Workflow"
                      },
                      "url": "https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}"
                    }
                  ]
                }
              ]
            }
          requires:
            - deploy_staging
      - hold_production:
          type: approval
          requires:
            - deploy_staging
            - slack/on-hold
      - deploy_production:
          context: legal-framework-api-production
          requires:
            - hold_production
          <<: *generic-slack-fail-post-step

  nightly:
    triggers:
      - schedule:
          cron: "0 2 * * *"
          filters:
            branches:
              only: main
    jobs:
      - clean_up_ecr
