module ProceedingTypes
  class ThresholdWaiversController < ApplicationController
    resource_description do
      short "Return threshold waivers"
      formats(%w[json])
      description <<-END_OF_TEXT
      == Description
        This endpoint accepts an array of proceeding types identified by#{' '}
        and returns threshold waivers for the given proceeding types.

          POST /proceeding_types/threshold_waivers

      END_OF_TEXT
    end

    api :POST, "proceeding_types/threshold_waivers", "Create a request to retrieve a list of proceeding types with their threshold waivers"
    param :request_id, :uuid, required: true, desc: "A UUID generated by the client to uniquely identify this request.  It will be returned in the response."
    param :proceeding_types, Array, required: true, desc: "CCMS codes of proceeding types in application"

    returns code: :ok, desc: "Successful response" do
      property :request_id, :uuid, desc: "The request_id specified in the request"
      property :success, %w[true], desc: "Success flag shows true"
      property :proceeding_types, Array, desc: "Proceeding typs and their associated whether their threshold information" do
        property :ccms_code, String, desc: "The CCMS_code of the proceeding type"
        property :gross_income_upper, String
        property :disposable_income_upper, String
        property :capital_upper, String
        property :matter_type, String
      end
    end

    returns code: :bad_request do
      property :request_id, :uuid, desc: "The request_id specified in the request"
      property :success, %w[false], desc: "Success flag shows false"
      property :error_class, String, desc: "Name of the error class that caused the exception"
      property :message, String, desc: "Error message"
      property :backtrace, array_of: String, desc: "Backtrace of exception"
    end

    def create
      history = RequestHistory.record_request(request_id, request)
      response = ThresholdWaiverService.call(request_id, ccms_codes)
      status = response[:success] ? 200 : 400
      history.record_response(status, response)
      render json: response, status: status
    end

  private

    def request_id
      params[:request_id]
    end

    def ccms_codes
      params[:proceeding_types]
    end
  end
end
