# frozen_string_literal: true

class MeritsTasksController < ApplicationController
  resource_description do
    description <<-END_OF_TEXT
    == Description
      This endpoint accepts an array of proceeding types identified by#{' '}
      ccms_code, and returns a list of merits task for the application, and for
      each proceeding type

        POST /merits_tasks

    END_OF_TEXT
  end
  api :POST, 'merits_tasks', 'Create a request to retrieve merits tasks for an application with the specified proceeding types'
  formats(%w[json])
  param :request_id, :uuid, required: true, desc: 'A UUID generated by the client to uniquely identify this request.  It will be returned in the response.'
  param :proceeding_types, Array, required: true, desc: 'CCMS codes of proceeding types in application'

  returns code: :ok, desc: 'Successful response' do
    property :request_id, :uuid, desc: 'The request_id specified in the request'
    property :success, %w[true], desc: 'Success flag shows true'
    property :application, Hash, desc: 'Merits tasks required at the application level' do
      property :tasks, Hash, desc: 'List of tasks and dependencies' do
        property :task_and_dependency, Hash, desc: 'Hash of key value pairs where the key is the task name, and the value is an array of dependencies'
      end
    end
    property :proceeding_types, Array, desc: 'Merits tasks required at the individual proceeding type level' do
      property :ccms_code, String, desc: 'The CCMS_code of the proceeding type'
      property :tasks, Hash, desc: 'List of tasks and dependencies for this proceeding type' do
        property :task_and_dependency, Hash, desc: 'Hash of key value pairs where the key is the task name, and the value is an array of dependencies'
      end
    end
  end

  returns code: :bad_request do
    property :request_id, :uuid, desc: 'The request_id specified in the request'
    property :success, %w[false], desc: 'Success flag shows false'
    property :error_class, String, desc: 'Name of the error class that caused the exception'
    property :message, String, desc: 'Error message'
    property :backtrace, array_of: String, desc: 'Backtrace of exception'
  end

  def create
    history = RequestHistory.record_request(request_id, request)
    response = MeritsTaskService.call(request_id, ccms_codes)
    status = response[:success] ? 200 : 400
    history.record_response(status, response)
    render json: response, status: status
  end

private

  def request_id
    params[:request_id]
  end

  def ccms_codes
    params[:proceeding_types]
  end
end
